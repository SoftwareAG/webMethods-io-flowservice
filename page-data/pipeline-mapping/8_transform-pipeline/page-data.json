{"componentChunkName":"component---src-templates-docs-js","path":"/pipeline-mapping/8_transform-pipeline","result":{"data":{"site":{"siteMetadata":{"title":"webMethods.io | FlowService Editor","docsLocation":"https://github.com/SoftwareAG/webmethods-io-flowservice/tree/master/content"}},"mdx":{"fields":{"id":"204a1e43-9433-570f-ad78-d86babc9c829","title":"Transform Pipeline","slug":"/pipeline-mapping/8_transform-pipeline"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Transform Pipeline\",\n  \"metaTitle\": \"Syntax Highlighting is the meta title tag for this page\",\n  \"metaDescription\": \"This is the meta description for this page\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"What is a Transformer?\"), mdx(\"p\", null, \"Transformers are services that are inserted into and executed within a Transform Pipeline step.\\nWe can use built-in service and connector(lookup tranformer) as a transformer.\\nWe can insert multiple transformers into a single Transform Pipeline step.\\nBy using multiple transformers, we can perform multiple data transformations on the pipeline contents in a single flow service step.\"), mdx(\"h2\", null, \"How Transform Pipeline is different from other steps ?\"), mdx(\"p\", null, \"Transformers act as collection of normal steps embedded in a single Transform Pipeline step.\\nHowever, transformers in a Transform Pipeline step are independent of each other, do not execute in a specific order, and might not execute in the same order each time the normal step runs.\\nConsequently, the output of one transformer cannot be used as the input to another transformer.\\nBecause transformers are contained within a Transform Pipeline step, they do not appear as a separate flow step in the editor.\\nThese characteristics make transformers different than a set of normal steps that execute sequentially in a flow service.\"), mdx(\"h2\", null, \"Why is Transform Pipeline required?\"), mdx(\"p\", null, \"The purpose of transformers is to accomplish multiple data transformations on the pipeline data in a single step as opposed to using succession of normal steps.\\nAs a result, transformers are well suited to use when mapping data from one document format to another. When mapping data between formats, we often need to perform several name, structure, and value transformations. With the use of transformers, the\\nflow service in which we map data between formats could potentially consist of a single Transform Pipeline step in where transformers and links between variables handle all of the data transformations. This provides a single view of document-to-document mapping.\"), mdx(\"h2\", null, \"How to insert a Transform Pipeline step in a flow service ?\"), mdx(\"p\", null, \"Search for 'Transform Pipeline' in the empty step of flow service and select the Transform Pipeline step filtered from step dropdown.\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/webmethods-io-flowservice/bcceb8247fe80151fc741d7e5386ff35/insert-transform-pipeline-step.gif\",\n    \"alt\": \"Insert transform Step\"\n  }))), mdx(\"h2\", null, \"How to add Transformer?\"), mdx(\"p\", null, \"Let us see an example of adding a built-in service.\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/webmethods-io-flowservice/7fd6d2c6dcdce8704832e480cfd18987/adding-transformer.gif\",\n    \"alt\": \"adding transformer\"\n  }))), mdx(\"h2\", null, \"How to map Pipeline variables to Transformer variables?\"), mdx(\"p\", null, \"The pipeline variables can be mapped to the service variables of the transformer(s) added.\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/webmethods-io-flowservice/8dd1349a8ee8a42ccb5e5307ecbb961d/mapping.gif\",\n    \"alt\": \"Mapping\"\n  }))), mdx(\"h2\", null, \"How to do a Direct Mapping?\"), mdx(\"p\", null, \"The pipeline input variables can be directly mapped to any of the pipeline output variables.\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/webmethods-io-flowservice/de81e059ca42fe8076c507454fafff9a/direct-mapping.gif\",\n    \"alt\": \"Direct Mapping\"\n  }))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Note\"))), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"At a time, only one transformer can be expanded. On collapsing , all the existing transformers are visible.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Transformer can be deleted using the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"delete\"), \" icon against each transformer. If a tranformer is deleted, the mappings made to its service variables will also be deleted.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#what-is-a-transformer","title":"What is a Transformer?"},{"url":"#how-transform-pipeline-is-different-from-other-steps-","title":"How Transform Pipeline is different from other steps ?"},{"url":"#why-is-transform-pipeline-required","title":"Why is Transform Pipeline required?"},{"url":"#how-to-insert-a-transform-pipeline-step-in-a-flow-service-","title":"How to insert a Transform Pipeline step in a flow service ?"},{"url":"#how-to-add-transformer","title":"How to add Transformer?"},{"url":"#how-to-map-pipeline-variables-to-transformer-variables","title":"How to map Pipeline variables to Transformer variables?"},{"url":"#how-to-do-a-direct-mapping","title":"How to do a Direct Mapping?"}]},"parent":{"__typename":"File","relativePath":"pipeline-mapping/8_transform-pipeline.mdx"},"frontmatter":{"metaTitle":"Syntax Highlighting is the meta title tag for this page","metaDescription":"This is the meta description for this page"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/conditional-constructs","title":"Conditional Constructs"}}},{"node":{"fields":{"slug":"/debug-flowservices","title":"Debug FlowServices"}}},{"node":{"fields":{"slug":"/define-io","title":"Define IO"}}},{"node":{"fields":{"slug":"/editor-usage","title":"Editor Usage"}}},{"node":{"fields":{"slug":"/error-handling","title":"Error Handling"}}},{"node":{"fields":{"slug":"/faqs","title":"Frequently Asked Questions"}}},{"node":{"fields":{"slug":"/flow-samples","title":"Flow Samples"}}},{"node":{"fields":{"slug":"/getting-started","title":"Getting Started"}}},{"node":{"fields":{"slug":"/","title":"Introducing FlowServices"}}},{"node":{"fields":{"slug":"/loop-constructs","title":"Loop Constructs"}}},{"node":{"fields":{"slug":"/pipeline-mapping","title":"Pipeline Mapping"}}},{"node":{"fields":{"slug":"/run-flowservices","title":"Run FlowServices"}}},{"node":{"fields":{"slug":"/schedule","title":"Schedule Flowservices"}}},{"node":{"fields":{"slug":"/simple-flowservice","title":"Simple FlowService"}}},{"node":{"fields":{"slug":"/conditional-constructs/1-condition-builder","title":"How to build conditions"}}},{"node":{"fields":{"slug":"/conditional-constructs/2-using-if","title":"Using conditions with If and Else"}}},{"node":{"fields":{"slug":"/conditional-constructs/3-using-elseif","title":"Multiple conditions with ElseIf"}}},{"node":{"fields":{"slug":"/conditional-constructs/4-using-switch","title":"The Switch Case"}}},{"node":{"fields":{"slug":"/conditional-constructs/5-using-branch","title":"Conditions with Branch"}}},{"node":{"fields":{"slug":"/debug-flowservices/1_debug-toolbar","title":"Controls in debug toolbar"}}},{"node":{"fields":{"slug":"/debug-flowservices/2_adding-removing-breakpoint","title":"To add or remove breakpoints"}}},{"node":{"fields":{"slug":"/debug-flowservices/3_debug-flowservice","title":"How to debug a Flowservice ?"}}},{"node":{"fields":{"slug":"/debug-flowservices/4_edit-pipeline-debug","title":"Modify pipeline values"}}},{"node":{"fields":{"slug":"/define-io/1_adding_fields","title":"Defining fields"}}},{"node":{"fields":{"slug":"/define-io/2_adding_document_reference","title":"Adding a document reference"}}},{"node":{"fields":{"slug":"/define-io/3_rearrange_fields","title":"Rearrange Fields"}}},{"node":{"fields":{"slug":"/define-io/4_loading_xml_json","title":"Loading XML or JSON"}}},{"node":{"fields":{"slug":"/define-io/5_copy_paste_search","title":"Copy, paste and Search"}}},{"node":{"fields":{"slug":"/editor-usage/1-naming-flow","title":"Naming a FlowService"}}},{"node":{"fields":{"slug":"/editor-usage/2-flow-actions","title":"FlowService Toolbar"}}},{"node":{"fields":{"slug":"/editor-usage/3-add-step","title":"Add or remove step"}}},{"node":{"fields":{"slug":"/editor-usage/4-step-dropdown","title":"Step Dropdown"}}},{"node":{"fields":{"slug":"/editor-usage/5-add-comment","title":"Add a comment to step"}}},{"node":{"fields":{"slug":"/editor-usage/6-step-dragndrop","title":"Rearrange Step - Drag and drop"}}},{"node":{"fields":{"slug":"/editor-usage/7-keyboard-shortcuts","title":"Keyboard shortcuts"}}},{"node":{"fields":{"slug":"/error-handling/1_handle-error","title":"How to handle an error ?"}}},{"node":{"fields":{"slug":"/error-handling/2_throw-error","title":"How to throw an error ?"}}},{"node":{"fields":{"slug":"/error-handling/3_exit-flow","title":"How to exit FlowService on success or failure ?"}}},{"node":{"fields":{"slug":"/flow-samples/1-Salesforce-to-marketo","title":"Generating Marketo Leads from Salesforce Contacts"}}},{"node":{"fields":{"slug":"/flow-samples/2-Concur-attendees-to-salesforce","title":"Get attendees from Concur and add them as contacts to Salesforce based on condition"}}},{"node":{"fields":{"slug":"/loop-constructs/1-loop-array","title":"How to loop over an Array ?"}}},{"node":{"fields":{"slug":"/loop-constructs/2-loop-input-output","title":"Loop with input-output"}}},{"node":{"fields":{"slug":"/loop-constructs/3-repeat-for-count","title":"Repeat execution for specific count"}}},{"node":{"fields":{"slug":"/loop-constructs/4-while","title":"Iterating with While"}}},{"node":{"fields":{"slug":"/loop-constructs/5-do-until","title":"Using Do Until"}}},{"node":{"fields":{"slug":"/pipeline-mapping/1_toolbar","title":"Toolbar"}}},{"node":{"fields":{"slug":"/pipeline-mapping/2_set-values","title":"Setting Values"}}},{"node":{"fields":{"slug":"/pipeline-mapping/3_mapping-fields","title":"Mapping Fields"}}},{"node":{"fields":{"slug":"/pipeline-mapping/4_remove-mapping","title":"Remove Mapping"}}},{"node":{"fields":{"slug":"/pipeline-mapping/5_copy-io-fields","title":"Copy IO fields into Pipeline"}}},{"node":{"fields":{"slug":"/pipeline-mapping/6_dropping-fields","title":"Dropping Fields from Pipeline"}}},{"node":{"fields":{"slug":"/pipeline-mapping/7_search","title":"Search"}}},{"node":{"fields":{"slug":"/pipeline-mapping/8_transform-pipeline","title":"Transform Pipeline"}}},{"node":{"fields":{"slug":"/run-flowservices/1_execute-flowservice","title":"Execute a FlowService"}}},{"node":{"fields":{"slug":"/run-flowservices/2_using-valuesets","title":"Using value sets"}}},{"node":{"fields":{"slug":"/run-flowservices/3_view-prev-results","title":"View previous execution results"}}},{"node":{"fields":{"slug":"/run-flowservices/4_download-json","title":"Download results as JSON"}}},{"node":{"fields":{"slug":"/schedule/1_schedule_once","title":"Schedule Once"}}},{"node":{"fields":{"slug":"/schedule/2_schedule_recurring","title":"Schedule Recurring"}}},{"node":{"fields":{"slug":"/simple-flowservice/add-services","title":"What's in a FlowService?"}}}]}},"pageContext":{"id":"204a1e43-9433-570f-ad78-d86babc9c829"}}}